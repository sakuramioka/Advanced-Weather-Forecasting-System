from bokeh.plotting import figure, output_file, show
from bokeh.models import DatetimeTickFormatter, HoverTool
from datetime import datetime
import pandas as pd

data = {
    'latitude': 11.0,
    'longitude': 77.0,
    'generationtime_ms': 0.02002716064453125,
    'utc_offset_seconds': 19800,
    'timezone': 'Asia/Kolkata',
    'timezone_abbreviation': 'IST',
    'elevation': 421.0,
    'hourly_units': {'time': 'iso8601', 'temperature_2m': '째C'},
    'hourly': {
        'time': [
            '2023-09-28T00:00', '2023-09-28T01:00', '2023-09-28T02:00', '2023-09-28T03:00', '2023-09-28T04:00', '2023-09-28T05:00', '2023-09-28T06:00', '2023-09-28T07:00', '2023-09-28T08:00', '2023-09-28T09:00', '2023-09-28T10:00', '2023-09-28T11:00', '2023-09-28T12:00', '2023-09-28T13:00', '2023-09-28T14:00', '2023-09-28T15:00', '2023-09-28T16:00', '2023-09-28T17:00', '2023-09-28T18:00', '2023-09-28T19:00', '2023-09-28T20:00', '2023-09-28T21:00', '2023-09-28T22:00', '2023-09-28T23:00', '2023-09-29T00:00', '2023-09-29T01:00', '2023-09-29T02:00', '2023-09-29T03:00', '2023-09-29T04:00', '2023-09-29T05:00', '2023-09-29T06:00', '2023-09-29T07:00', '2023-09-29T08:00', '2023-09-29T09:00', '2023-09-29T10:00', '2023-09-29T11:00', '2023-09-29T12:00', '2023-09-29T13:00', '2023-09-29T14:00', '2023-09-29T15:00', '2023-09-29T16:00', '2023-09-29T17:00', '2023-09-29T18:00', '2023-09-29T19:00', '2023-09-29T20:00', '2023-09-29T21:00', '2023-09-29T22:00', '2023-09-29T23:00', '2023-09-30T00:00', '2023-09-30T01:00', '2023-09-30T02:00', '2023-09-30T03:00', '2023-09-30T04:00', '2023-09-30T05:00', '2023-09-30T06:00', '2023-09-30T07:00', '2023-09-30T08:00', '2023-09-30T09:00', '2023-09-30T10:00', '2023-09-30T11:00', '2023-09-30T12:00', '2023-09-30T13:00', '2023-09-30T14:00', '2023-09-30T15:00', '2023-09-30T16:00', '2023-09-30T17:00', '2023-09-30T18:00', '2023-09-30T19:00', '2023-09-30T20:00', '2023-09-30T21:00', '2023-09-30T22:00', '2023-09-30T23:00', '2023-10-01T00:00', '2023-10-01T01:00', '2023-10-01T02:00', '2023-10-01T03:00', '2023-10-01T04:00', '2023-10-01T05:00', '2023-10-01T06:00', '2023-10-01T07:00', '2023-10-01T08:00', '2023-10-01T09:00', '2023-10-01T10:00', '2023-10-01T11:00', '2023-10-01T12:00', '2023-10-01T13:00', '2023-10-01T14:00', '2023-10-01T15:00', '2023-10-01T16:00', '2023-10-01T17:00', '2023-10-01T18:00', '2023-10-01T19:00', '2023-10-01T20:00', '2023-10-01T21:00', '2023-10-01T22:00', '2023-10-01T23:00', '2023-10-02T00:00', '2023-10-02T01:00', '2023-10-02T02:00', '2023-10-02T03:00', '2023-10-02T04:00', '2023-10-02T05:00', '2023-10-02T06:00', '2023-10-02T07:00', '2023-10-02T08:00', '2023-10-02T09:00', '2023-10-02T10:00', '2023-10-02T11:00', '2023-10-02T12:00', '2023-10-02T13:00', '2023-10-02T14:00', '2023-10-02T15:00', '2023-10-02T16:00', '2023-10-02T17:00', '2023-10-02T18:00', '2023-10-02T19:00', '2023-10-02T20:00', '2023-10-02T21:00', '2023-10-02T22:00', '2023-10-02T23:00', '2023-10-03T00:00', '2023-10-03T01:00', '2023-10-03T02:00', '2023-10-03T03:00', '2023-10-03T04:00', '2023-10-03T05:00', '2023-10-03T06:00', '2023-10-03T07:00', '2023-10-03T08:00', '2023-10-03T09:00', '2023-10-03T10:00', '2023-10-03T11:00', '2023-10-03T12:00', '2023-10-03T13:00', '2023-10-03T14:00', '2023-10-03T15:00', '2023-10-03T16:00', '2023-10-03T17:00', '2023-10-03T18:00', '2023-10-03T19:00', '2023-10-03T20:00', '2023-10-03T21:00', '2023-10-03T22:00', '2023-10-03T23:00', '2023-10-04T00:00', '2023-10-04T01:00', '2023-10-04T02:00', '2023-10-04T03:00', '2023-10-04T04:00', '2023-10-04T05:00', '2023-10-04T06:00', '2023-10-04T07:00', '2023-10-04T08:00', '2023-10-04T09:00', '2023-10-04T10:00', '2023-10-04T11:00', '2023-10-04T12:00', '2023-10-04T13:00', '2023-10-04T14:00', '2023-10-04T15:00', '2023-10-04T16:00', '2023-10-04T17:00', '2023-10-04T18:00', '2023-10-04T19:00', '2023-10-04T20:00', '2023-10-04T21:00', '2023-10-04T22:00', '2023-10-04T23:00'
        ],
        'temperature_2m': [
            23.9, 23.7, 23.5, 23.3, 23.3, 23.2, 23.5, 24.6, 26.5, 28.0, 29.1, 29.6, 29.3, 29.6, 28.3, 27.7, 27.1, 26.3, 25.2, 24.7, 24.7, 24.8, 24.8, 24.5, 24.5, 24.4, 24.2, 24.1, 24.1, 24.2, 24.2, 24.5, 25.0, 24.7, 24.8, 26.1, 25.9, 26.1, 26.1, 25.6, 25.1, 24.8, 24.6, 24.2, 24.1, 24.1, 24.0, 24.0, 23.8, 23.8, 23.7, 23.6, 23.7, 23.7, 23.6, 24.7, 25.2, 27.5, 27.9, 27.6, 28.8, 28.4, 27.1, 27.3, 26.7, 25.7, 24.9, 24.9, 24.6, 24.6, 24.4, 24.3, 24.3, 24.1, 24.1, 23.9, 24.0, 24.1, 24.3, 24.7, 25.1, 25.7, 26.4, 27.1, 27.7, 28.2, 28.4, 27.9, 27.0, 26.1, 25.5, 25.0, 24.6, 24.4, 24.3, 24.2, 24.2, 24.1, 24.1, 23.8, 23.4, 23.5, 24.4, 25.8, 27.1, 28.3, 29.4, 30.3, 30.8, 31.0, 30.7, 29.8, 28.5, 27.3, 26.3, 25.5, 24.9, 24.6, 24.6, 24.6, 24.3, 24.2, 24.1, 23.9, 23.9, 24.1, 25.0, 26.2, 27.4, 28.7, 30.0, 30.9, 31.1, 30.8, 30.3, 29.3, 28.1, 27.1, 26.3, 25.8, 25.3, 25.0, 24.9, 24.7, 24.6, 24.5, 24.4, 24.1, 23.7, 23.8, 24.6, 25.9, 27.2, 28.8, 30.4, 31.2, 30.7, 29.5, 28.4, 27.9, 27.5, 27.1, 26.5, 25.9, 25.4, 25.1, 25.1, 25.0
        ]
    }
}

# Extract timestamps and temperatures
timestamps = data['hourly']['time']
temperatures = data['hourly']['temperature_2m']

# Convert timestamps to datetime objects
timestamps = [datetime.fromisoformat(timestamp) for timestamp in timestamps]

# Create a pandas DataFrame
df = pd.DataFrame({'timestamps': timestamps, 'temperatures': temperatures})

# Output to an HTML file (optional)
output_file("temperature_plot.html")

# Create a Bokeh figure
p = figure(
    x_axis_type="datetime",
    title="Temperature Data",
    x_axis_label="Time",
    y_axis_label="Temperature (째C)",
    width=1480,
    height=710,
)

# Plot the temperature data as a line
p.line(df['timestamps'], df['temperatures'], legend_label="Temperature (째C)", line_width=2, color='blue')

# Format the x-axis labels
p.xaxis.formatter = DatetimeTickFormatter(hours="%H:%M")

hover = HoverTool()
hover.tooltips = [("Time", "@x{%Y-%m-%d %H:%M}"), ("Temperature", "@y{0.0} 째C")]
hover.formatters = {'@x': 'datetime'}
hover.mode = 'vline'
p.add_tools(hover)

# Show the plot in full screen
show(p, full_screen=True)





